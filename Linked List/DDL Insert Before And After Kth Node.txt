#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    Node* prev;
    
    public:
    Node(int data)
    {
        this->data=data;
        next=nullptr;
        prev=nullptr;
    }
};
Node* createLinkedList(vector<int>& arr)
{
    if(arr.size()==0) return nullptr;
    Node* head=new Node(arr[0]);
    Node* prev=head;
    for(int i=1;i<arr.size();i++)
    {
        Node* temp=new Node(arr[i]);
        temp->prev=prev;
        prev->next=temp;
        prev=temp;
    }
    return head;
}
Node* insertbeforeKPosition(Node* head, int k, int ele)
{
    if(k==1)
    {
        Node* newnode=new Node(ele);
        newnode->next=head;
        head->prev=newnode;
        head=newnode;
        return head;
    }
    int cnt=0;
    Node* temp=head;
    while(temp!=nullptr)
    {
        cnt++;
        if(cnt==k-1)
        {
            Node* newnode=new Node(ele);
            newnode->next=temp->next;
            temp->next->prev=newnode;
            newnode->prev=temp;
            temp->next=newnode;
            break;
        }
        temp=temp->next;
    }
    return head;
}
Node* insertafterKPosition(Node* head, int k, int ele)
{
    if(k==1)
    {
        Node* newnode=new Node(ele);
        newnode->next=head->next;
        head->next->prev=newnode;
        newnode->prev=head;
        head->next=newnode;
        return head;
    }
    int cnt=0;
    Node* temp=head;
    while(temp!=nullptr)
    {
        cnt++;
        if(cnt==k)
        {
            Node* newnode=new Node(ele);
            newnode->next=temp->next;
            temp->next->prev=newnode;
            newnode->prev=temp;
            temp->next=newnode;
            break;
        }
        temp=temp->next;
    }
    return head;
}
void print(Node* head)
{
    Node* temp=head;
    while(temp!=nullptr)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8};
    Node* head=createLinkedList(arr);
    int ele=10;
   // head=insertbeforeKPosition(head,8,ele);
    head=insertafterKPosition(head,7,ele);
    print(head);
}