#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    Node* prev;
    
    public:
    Node(int data)  
    {
        this->data=data;
        next=nullptr;
        prev=nullptr;
    }
};
Node* createLinkedList(vector<int>&arr)
{
    Node* head=new Node(arr[0]);
    Node* prev=head;
    for(int i=1;i<arr.size();i++)
    {
        Node* temp=new Node(arr[i]);
        temp->prev=prev;
        prev->next=temp;
        prev=temp;
    }
    return head;
    
}
Node* deleteKNode(Node* head,int k)
{
    if(head==nullptr) return nullptr;
    if(head->next==nullptr && head->prev==nullptr) //Single element of Doubly Linked List
    {
        delete(head);
        return nullptr;
    }
    int cnt=0;
    Node* temp=head;
    while(temp!=nullptr)
    {
        cnt++;
        if(cnt==k)
        break;
        temp=temp->next;
    }
    if(temp->prev==nullptr) //DeleteBeg
    {
        Node* deletetemp=temp;
        temp=temp->next;
        temp->prev=nullptr;
        deletetemp->next=nullptr;
        delete(deletetemp);
        return temp;
    }
    else if(temp->next==nullptr) //DeleteLast
    {
        temp->prev->next=nullptr;
        temp->prev=nullptr;
        delete(temp);
        return head;
    }
    else //Delete Middle
    {
        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;
        
        temp->prev=nullptr;
        temp->next=nullptr;
        
        delete(temp);
        return head;
    }
}
void print(Node* head)
{
    Node* temp=head;
    while(temp!=nullptr)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8};
    Node* head=createLinkedList(arr);
    int k=1;
    head=deleteKNode(head,k);
    print(head);
}